<?php
class Product
{//устанавливаем переменные
    protected $name;
    protected $price;
    protected $description;
    protected $brand;

    public function __construct($nam, $pr, $des, $br)
    {//подключили конструктор  для передчи значений
        $this->name = $nam;//передали значения в переменные
        $this->price = $pr;
        $this->description = $des;
        $this->brand = $br;
    }
    public function getProduct()//возвращаем значения родителя которые доступны всем потомкам (ребёнкам)
    {//возвращаем значения родителя  в виде массива
        //[в ключ записываем имя переменной]=>значение $this->name ;
        return array("name"=>$this->name, "price"=>$this->price,"description"=>$this->description, "brand"=>$this->brand);
    }
}
class Phone extends Product
{
    private $cpu;
    private $ram;
    private $countSim;
    private $hdd;
    private $os;
    //вызываем конструктор родителя + наследник
    public function __construct($nam, $pr, $des, $br,  $cpu, $ram, $sim, $hdd, $os)
    {
        parent::__construct($nam, $pr, $des, $br);//вызываем конструктор родителя
        $this->cpu = $cpu;//передали значения в переменные
        $this->ram = $ram;
        $this->countSim = $sim;
        $this->hdd = $hdd;
        $this->os = $os ;
    }
    public function getProducts()//вызываем return родителя
    {//возвращаем значения родителя
        return parent::getProduct(); // TODO: Change the autogenerated stub

    }
    public function getParent()//возвращаем значения ребенка
    {////возвращаем значения ребенка в виде массива со значениями
        //[в ключ записываем имя переменной]=>значение $this->name ;
        return array("cpu"=>$this->cpu, "ram"=>$this->ram, "countSim"=>$this->countSim, "hdd"=>$this->hdd, "os"=>$this->os);
    }
}
class Monitor extends Product
{
    private $diagonal;
    private $frequency;
    private $ports;
    //вызываем конструктор родителя + наследник
    function __construct($nam, $pr, $des, $br,  $d, $freq, $ports)
    {
        parent::__construct($nam, $pr, $des, $br);//вызываем конструктор родителя
        $this->diagonal = $d;//передали значения в переменные
        $this->frequency = $freq;
        $this->ports = $ports;
    }
    public function getProd()//вызываем return родителя
    {//ненужен так как echo $rez1->getMonitor(); мы  не выводим ->getProd()
        //вернули значения родителя если необходимо
        return parent::getProduct(); // TODO: Change the autogenerated stub
    }
    public function getMonitor()
    {//вернули массив из значений монитора//[в ключ записываем имя переменной]=>значение $this->name ;
        return array("diagonal"=>$this->diagonal, "frequency"=>$this->frequency, "ports"=>$this->ports);
    }
}
//.'  вывело родителя'.'<br>'
$rez = new Product('Galaxy', '', 'Модель телефона', ' Samsung');
//echo '<pre>';
//print_r($rez->getProduct());
//echo '</pre>';
//задаю значения обьектам родитель + ребёнок
$rez2 = new Phone('Galaxy', '', 'Модель телефона', ' Samsung', 'Тачскрин', '8 ГБ', '2','128ГБ', 'Андроид' );
$rez1 = new Monitor('Galaxy', '', 'Модель телефона', ' Samsung','165,5 mm', '1.9ГГЦ', 'USB 3.16');
//вывели массив со значениями родителя  от родителя
echo '<pre>';
print_r($rez->getProduct());
echo '</pre>';
//вывели массив со значениями родителя  от наследника (ребенка)
//echo '<pre>';
//print_r($rez2->getProducts());
//echo '</pre>';

//вывели массив со значениями одно из  наследников
echo '<pre>';
print_r($rez2->getParent());
echo '</pre>';
//вывели массив со значениями одно из  наследников
echo '<pre>';
print_r($rez1->getMonitor());
echo '</pre>';
// записали массив в переменную
$a = $rez2->getProducts();
$b= $rez2->getParent();
$c =$rez1->getMonitor();
//в новой переменной array_merge(объединила массивы)
$d= array_merge($a, $b,$c);
//вывела объединённые массивы
echo '<pre>';
print_r($d);
echo '</pre>';


